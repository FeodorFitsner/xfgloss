<?xml version="1.0" encoding="UTF-8"?>
<ContentPage	xmlns="http://xamarin.com/schemas/2014/forms"
				xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
				xmlns:xfGloss="clr-namespace:XFGloss.Views;assembly=XFGloss"
				xmlns:xfgModels="clr-namespace:XFGloss.Models;assembly=XFGloss"
				x:Class="XFGlossSample.Examples.Views.Xaml.BackgroundGradientPage"
				>

	<xfGloss:Page.BackgroundGradient>
		<!-- 
		Just want a basic 2 color vertical gradient? This does it. You can also add
		IsHorizontal="true", IsReverseHorizontal="true" or IsReverseVertical="true" to
		change the gradient direction.
		-->
		<xfgModels:Gradient StartColor="White" EndColor="#800000"/>
	</xfGloss:Page.BackgroundGradient>
	
	<ScrollView>
		<StackLayout>
				<!-- This is a bit of a hack. Android's renderer for TableView always adds an empty header for a 
					 TableSection declaration, while iOS doesn't. To compensate, I'm using a Label to display info text
					 on iOS, and the TableSection on Android since there is no easy way to get rid of it. This is a 
					 long-standing bug in the XF TableView on Android.
					(https://forums.xamarin.com/discussion/18037/tablesection-w-out-header)
				-->
				<Label Text="Cell BackgroundGradient values set in Xaml:" Margin="10">
					<Label.IsVisible>
						<OnPlatform x:TypeArguments="x:Boolean" iOS="true" Android="false" />
					</Label.IsVisible>
				</Label>
			<TableView Intent="Data" BackgroundColor="Transparent" VerticalOptions="Start">
				<TableView.HeightRequest>
					<!-- Having to make table view big enough on Android to see all four rows plus the unwanted header -->
					<OnPlatform x:TypeArguments="x:Double" iOS="176" Android="232" />
				</TableView.HeightRequest>
				<TableView.Root>
					<TableSection>
						<!-- 
							 Yet another hack related to the TableSection. We want the title to be empty on iOS (so there
							 won't be a header created) but set on Android (since a header is always created - might as 
							 well make use of it!
						-->
						<TableSection.Title>
							<OnPlatform x:TypeArguments="x:String" iOS="" Android="Cell BackgroundGradient values set in Xaml:" />
						</TableSection.Title>
						<TextCell Text="Red" TextColor="White">
							<xfGloss:Cell.BackgroundGradient>
								<xfgModels:Gradient StartColor="Red" EndColor="Maroon" IsVertical="true" />
							</xfGloss:Cell.BackgroundGradient>
						</TextCell>
						<TextCell Text="Green" TextColor="White">
							<xfGloss:Cell.BackgroundGradient>
								<xfgModels:Gradient StartColor="Lime" EndColor="Green" IsHorizontal="true" />
							</xfGloss:Cell.BackgroundGradient>
						</TextCell>
						<TextCell Text="Blue" TextColor="White">
							<xfGloss:Cell.BackgroundGradient>
								<xfgModels:Gradient StartColor="Blue" EndColor="Navy" IsReverseVertical="true" />
							</xfGloss:Cell.BackgroundGradient>
						</TextCell>
						<TextCell Text="All Three" TextColor="White" x:Name="testCell">
							<!-- You can also create gradients at any angle with as many steps as you want. -->
							<xfGloss:Cell.BackgroundGradient>
								<xfgModels:Gradient Angle="135" x:Name="rotatingGradient">
									<xfgModels:Gradient.Steps>
										<xfgModels:GradientStep StepColor="Red" StepPercentage="0" />
										<xfgModels:GradientStep StepColor="Maroon" StepPercentage=".25" />
										<xfgModels:GradientStep StepColor="Lime" StepPercentage=".4" />
										<xfgModels:GradientStep StepColor="Green" StepPercentage=".6" />
										<xfgModels:GradientStep StepColor="Blue" StepPercentage=".75" />
										<xfgModels:GradientStep StepColor="Navy" StepPercentage="1" />
									</xfgModels:Gradient.Steps>
								</xfgModels:Gradient>
							</xfGloss:Cell.BackgroundGradient>
						</TextCell>
					</TableSection>
				</TableView.Root>
			</TableView>
			<Label Text="ContentPage BackgroundGradient value set in Xaml:" Margin="10" />
		</StackLayout>
	</ScrollView>
	
</ContentPage>
